{"version":3,"sources":["components/UI/Button/Button.css","hoc/Layout/Layout.css","containers/Tasker/Tasker.css","components/FormOftasks/MyForm.css","components/ListOfTasks/ListOfTasks.css","components/ListOfTasks/Task/Task.css","hoc/Layout/Layout.js","components/UI/Button/Button.js","components/FormOftasks/MyForm.js","components/ListOfTasks/Task/Task.js","components/ListOfTasks/ListOfTasks.js","containers/Tasker/Tasker.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Button","red","Layout","Tasker","MyForm","ListOfTasks","Task","react_default","a","createElement","className","classes","this","props","children","React","Component","cls","type","join","onClick","name","onChange","e","changeNameFunc","htmlFor","id","UI_Button_Button","AddTask","task","map","obj","index","key","nameOfTask","endDate","description","deleteTask","ListOfTasks_Task_Task","tasks","state","onChangeNameHandler","_this","setState","target","value","addTaskHandler","input","document","querySelector","push","deleteTaskButtonHandler","shift","splice","components_FormOftasks_MyForm","components_ListOfTasks_ListOfTasks","App","hoc_Layout_Layout","containers_Tasker_Tasker","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+EACAA,EAAAC,QAAA,CAAkBC,OAAA,wBAAAC,IAAA,yCCAlBH,EAAAC,QAAA,CAAkBG,OAAA,0CCAlBJ,EAAAC,QAAA,CAAkBI,OAAA,0CCAlBL,EAAAC,QAAA,CAAkBK,OAAA,0CCAlBN,EAAAC,QAAA,CAAkBM,YAAA,oDCAlBP,EAAAC,QAAA,CAAkBO,KAAA,wNCqBHJ,mLAdP,OACIK,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQT,QAEpBK,EAAAC,EAAAC,cAAA,YACKG,KAAKC,MAAMC,kBARXC,IAAMC,6DCOZhB,EAPD,SAACa,GACX,IAAMI,EAAI,CAACN,IAAQX,OAAQa,EAAMK,KAAMP,IAAQE,EAAMK,MAAQ,MAC7D,OACIX,EAAAC,EAAAC,cAAA,UAAQC,UAAWO,EAAIE,KAAK,KAAMC,QAASP,EAAMO,SAAWP,EAAMC,WCY3DV,EAfA,SAACS,GACZ,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQP,QACpBG,EAAAC,EAAAC,cAAA,UAAKI,EAAMQ,MACXd,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,SAAOS,KAAK,OAAOI,SAAU,SAACC,GAAD,OAAKV,EAAMW,eAAeD,MAEvDhB,EAAAC,EAAAC,cAAA,SAAOgB,QAAQ,YAAf,eACAlB,EAAAC,EAAAC,cAAA,SAAOS,KAAK,OAAOQ,GAAG,aACtBnB,EAAAC,EAAAC,cAACkB,EAAD,CAAQP,QAASP,EAAMe,SAAvB,gDCaGtB,EAvBF,SAACO,GACV,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQL,MACvBO,EAAMgB,KAAKC,IAAI,SAACC,EAAKC,GAClB,OACIzB,EAAAC,EAAAC,cAAA,MAAIwB,IAAKD,GACLzB,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAKsB,EAAIG,YACT3B,EAAAC,EAAAC,cAAA,aAAQsB,EAAII,UAEZ5B,EAAAC,EAAAC,cAAA,SAAIsB,EAAIK,aACR7B,EAAAC,EAAAC,cAACkB,EAAD,CAAQP,QAAS,kBAAIP,EAAMwB,WAAWL,IAAQd,KAAM,OAApD,wFCQLb,EAlBK,SAACQ,GACjB,OACIN,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQN,aACpBE,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAC6B,EAAD,CACIT,KAAMhB,EAAM0B,MACZF,WAAYxB,EAAMwB,gBCuDvBlC,6MA3DXqC,MAAM,CACFnB,KAAM,GACNkB,MAAM,CACF,CAACL,WAAY,0DAAcE,YAAa,MAAOD,QAAQ,cACvD,CAACD,WAAY,8FAAoBE,YAAa,MAAOD,QAAQ,cAC7D,CAACD,WAAY,kFAAkBE,YAAa,MAAOD,QAAQ,kBAInEM,oBAAsB,SAAClB,GACrBmB,EAAKC,SAAS,CACVtB,KAAME,EAAEqB,OAAOC,WAGrBC,eAAgB,WACZ,IAAMC,EAAQC,SAASC,cAAc,aAAaJ,MAC9CN,EAAQG,EAAKF,MAAMD,MACvBA,EAAMW,KAAK,CAAChB,WAAYa,EAAOX,YAAaW,EAAOZ,QAASY,IAC5DL,EAAKC,SAAS,CACVJ,aAIRY,wBAA0B,SAACnB,GACvB,IAAMO,EAAOG,EAAKF,MAAMD,MACf,IAATP,EAAaO,EAAMa,QAAUb,EAAMc,OAAOrB,EAAMA,GAChDU,EAAKC,SAAS,CACVJ,mFAQJ,OACIhC,EAAAC,EAAAC,cAAA,OAAKC,UAAWC,IAAQR,QAEpBI,EAAAC,EAAAC,cAAC6C,EAAD,CACA9B,eAAgBZ,KAAK6B,oBACrBpB,KAAMT,KAAK4B,MAAMnB,KACjBO,QAAShB,KAAKkC,iBAGjBvC,EAAAC,EAAAC,cAAC8C,EAAD,CACIlC,KAAMT,KAAK4B,MAAMnB,KACjBkB,MAAO3B,KAAK4B,MAAMD,MAClBF,WAAYzB,KAAKuC,kCAhDbpC,IAAMC,WCWZwC,mLAVX,OACIjD,EAAAC,EAAAC,cAACgD,EAAD,KACElD,EAAAC,EAAAC,cAACiD,EAAD,cAJQ1C,aCQE2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1D,EAAAC,EAAAC,cAACyD,EAAD,MAASlB,SAASmB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.651429cc.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button__Button--QI7b2\",\"red\":\"Button__red--2y9Rq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout__Layout--2C2_c\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Tasker\":\"Tasker__Tasker--OWyAI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"MyForm\":\"MyForm__MyForm--3Ziik\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ListOfTasks\":\"ListOfTasks__ListOfTasks--1xqwl\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Task\":\"Task__Task--1jd-7\"};","import React from 'react'\nimport classes from './Layout.css'\n\n\nclass Layout extends React.Component{\n\n    render(){\n\n        return(\n            <div className={classes.Layout}>\n\n                <main>\n                    {this.props.children}\n                </main>\n\n            </div>\n        )\n    }\n\n};\n\n\nexport default Layout","import React from 'react'\nimport classes from './Button.css'\n\n\nconst Button =(props)=>{\n    const cls=[classes.Button, props.type? classes[props.type] : null];\n    return(\n        <button className={cls.join(' ')} onClick={props.onClick} >{props.children}</button>\n    )\n\n};\nexport default Button","import React from 'react'\nimport classes from './MyForm.css'\nimport Button from '../UI/Button/Button'\n\nconst MyForm = (props)=>{\n    return(\n        <div className={classes.MyForm}>\n            <h1>{props.name}</h1>\n            <label>Input your name:</label>\n            <input type=\"text\" onChange={(e)=>props.changeNameFunc(e)}/>\n\n            <label htmlFor=\"TaskName\">Task Name: </label>\n            <input type=\"text\" id='nameTask'/>\n            <Button onClick={props.AddTask}>Add Task</Button>\n        </div>\n    )\n\n};\n\nexport default MyForm","import React from 'react'\nimport classes from './Task.css'\nimport Button from '../../UI/Button/Button'\nconst Task = (props)=>{\n    return(\n        <div className={classes.Task}>\n        {props.task.map((obj, index)=>{\n            return(\n                <li key={index}>\n                    <div>\n                    <h3>{obj.nameOfTask}</h3>\n                    <small>{obj.endDate}</small>\n                    </div>\n                    <p>{obj.description}</p>\n                    <Button onClick={()=>props.deleteTask(index)} type={'red'}>Закончить таск</Button>\n\n                </li>\n            )\n\n        })}\n        </div>\n    )\n\n\n};\n\nexport default Task","import React from 'react'\nimport classes from './ListOfTasks.css'\nimport Task from './Task/Task'\n\nconst ListOfTasks = (props)=>{\n    return(\n        <div className={classes.ListOfTasks}>\n            <ul>\n                <Task\n                    task={props.tasks}\n                    deleteTask={props.deleteTask}\n\n\n\n                />\n            </ul>\n        </div>\n\n    )\n\n};\n\nexport default ListOfTasks","import React from 'react'\nimport classes from './Tasker.css'\nimport MyForm from \"../../components/FormOftasks/MyForm\";\nimport ListOfTasks from '../../components/ListOfTasks/ListOfTasks'\n\nclass Tasker extends React.Component{\n    state={\n        name: '',\n        tasks:[\n            {nameOfTask: 'Сделать Дз', description: 'kek', endDate:'22 january'},\n            {nameOfTask: 'Приготовить ужин', description: 'kek', endDate:'22 january'},\n            {nameOfTask: 'Заказать линзы', description: 'kek', endDate:'22 january'}\n            ]\n    };\n\n    onChangeNameHandler = (e)=>{\n      this.setState({\n          name: e.target.value\n      })\n    };\n    addTaskHandler= ()=>{\n        const input = document.querySelector('#nameTask').value;\n        let tasks = this.state.tasks;\n        tasks.push({nameOfTask: input, description: input, endDate: input});\n        this.setState({\n            tasks\n        })\n\n    };\n    deleteTaskButtonHandler = (index)=>{\n        const tasks= this.state.tasks;\n        index ===0 ? tasks.shift() : tasks.splice(index,index);\n        this.setState({\n            tasks\n        })\n\n\n\n    };\n\n    render(){\n        return(\n            <div className={classes.Tasker}>\n\n                <MyForm\n                changeNameFunc={this.onChangeNameHandler}\n                name={this.state.name}\n                AddTask={this.addTaskHandler}\n\n                />\n             <ListOfTasks\n                 name={this.state.name}\n                 tasks={this.state.tasks}\n                 deleteTask={this.deleteTaskButtonHandler}\n\n\n             />\n            </div>\n        )\n\n    }\n\n\n};\n\nexport default Tasker","import React, { Component } from 'react';\nimport Layout from './hoc/Layout/Layout'\nimport Tasker from './containers/Tasker/Tasker'\n\nclass App extends Component {\n  render() {\n    return (\n        <Layout>\n          <Tasker/>\n\n        </Layout>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}