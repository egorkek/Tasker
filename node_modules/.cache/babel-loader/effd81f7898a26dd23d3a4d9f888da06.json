{"ast":null,"code":"import _regeneratorRuntime from \"/Users/egor/Documents/qqq/Tasker/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/egor/Documents/qqq/Tasker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { getTasks } from './getTasks';\nexport function auth(email, password, isLogin) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var authData, dbName, dataForBD, response, idToken, expirationDate;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                authData = {\n                  email: email,\n                  password: password,\n                  returnSecureToken: true\n                };\n                dbName = authData.email.replace('@', '').replace('.', '');\n\n                if (isLogin) {\n                  _context.next = 8;\n                  break;\n                }\n\n                console.log(authData);\n                dataForBD = {\n                  email: email,\n                  listOfTasks: {}\n                };\n                _context.next = 7;\n                return axios.post('https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=AIzaSyDJHO8YGwRavnNLmCryDKXOic-ChroRlFo', authData);\n\n              case 7:\n                axios.put(\"https://taskscheduler-be7db.firebaseio.com/users/\".concat(dbName, \".json\"), dataForBD);\n\n              case 8:\n                if (!isLogin) {\n                  _context.next = 22;\n                  break;\n                }\n\n                _context.next = 11;\n                return axios.post('https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=AIzaSyDJHO8YGwRavnNLmCryDKXOic-ChroRlFo', authData);\n\n              case 11:\n                response = _context.sent;\n                idToken = response.data.idToken;\n                expirationDate = new Date(new Date().getTime() + response.data.expiresIn * 1000);\n                localStorage.setItem('token', idToken);\n                localStorage.setItem('expirationDate', expirationDate);\n                localStorage.setItem('keyForBD', dbName);\n                localStorage.setItem('email', authData.email);\n                console.log(localStorage); // const info = await axios.get(`https://taskscheduler-be7db.firebaseio.com/users/<${response.data.email.replace('@', '').replace('.', '')}>.json`);\n\n                dispatch(login(authData.email, idToken, dbName));\n                dispatch(getTasks());\n                dispatch(autoLogout(response.data.expiresIn));\n\n              case 22:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function autoLogout(time) {\n  return function (dispatch) {\n    setTimeout(function () {\n      logout();\n    }, time * 1000);\n  };\n}\n;\nexport function logout() {\n  localStorage.removeItem('token');\n  localStorage.removeItem('keyForBD');\n  localStorage.removeItem('expirationDate');\n  localStorage.removeItem('email');\n  return {\n    type: 'LOGOUT'\n  };\n}\n\nfunction login(info, idToken, keyForBD) {\n  return {\n    type: 'LOG_IN',\n    email: info,\n    idToken: idToken,\n    keyForBD: keyForBD\n  };\n}\n\nexport function autoLogin() {\n  return function (dispatch, getState) {\n    var token = localStorage.getItem('token');\n    var keyForBD = localStorage.getItem('keyForBD');\n    console.log(token, keyForBD);\n\n    if (!token) {\n      dispatch(logout());\n    } else {\n      var expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n      if (expirationDate <= new Date()) {\n        dispatch(logout());\n      } else {\n        dispatch(autoLogout((expirationDate.getTime() - new Date().getTime()) / 1000));\n      }\n    }\n  };\n}","map":{"version":3,"sources":["/Users/egor/Documents/qqq/Tasker/src/store/actions/auth.js"],"names":["axios","getTasks","auth","email","password","isLogin","dispatch","getState","authData","returnSecureToken","dbName","replace","console","log","dataForBD","listOfTasks","post","put","response","idToken","data","expirationDate","Date","getTime","expiresIn","localStorage","setItem","login","autoLogout","time","setTimeout","logout","removeItem","type","info","keyForBD","autoLogin","token","getItem"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport {getTasks} from './getTasks'\n\nexport function auth(email, password, isLogin) {\n    return async (dispatch, getState) =>{\n        const authData = {\n            email,password, returnSecureToken: true\n        };\n        const dbName = authData.email.replace('@', '').replace('.', '');\n        if (!isLogin) {\n            console.log(authData);\n            const dataForBD = {\n                email,\n                listOfTasks:{\n\n                }\n\n\n            };\n\n            await axios.post('https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=AIzaSyDJHO8YGwRavnNLmCryDKXOic-ChroRlFo', authData);\n            axios.put(`https://taskscheduler-be7db.firebaseio.com/users/${dbName}.json`, dataForBD );\n\n        }\n        if(isLogin){\n        const response = await axios.post('https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=AIzaSyDJHO8YGwRavnNLmCryDKXOic-ChroRlFo', authData);\n        const idToken = response.data.idToken;\n        const expirationDate = new Date(new Date().getTime() +response.data.expiresIn * 1000);\n\n        localStorage.setItem('token', idToken);\n        localStorage.setItem('expirationDate', expirationDate);\n        localStorage.setItem('keyForBD', dbName);\n        localStorage.setItem('email', authData.email)\n        console.log(localStorage);\n\n        // const info = await axios.get(`https://taskscheduler-be7db.firebaseio.com/users/<${response.data.email.replace('@', '').replace('.', '')}>.json`);\n        dispatch(login(authData.email, idToken, dbName));\n        dispatch(getTasks());\n        dispatch(autoLogout(response.data.expiresIn))\n\n\n\n\n        }\n\n    }\n\n}\n\n\n\nexport function autoLogout(time) {\n    return dispatch=>{\n        setTimeout(()=>{\n            logout()\n\n        }, time*1000)\n    }\n\n};\nexport function logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('keyForBD');\n    localStorage.removeItem('expirationDate');\n    localStorage.removeItem('email')\n\n    return{\n        type: 'LOGOUT'\n    }\n\n}\nfunction login(info, idToken, keyForBD) {\n    return{\n        type: 'LOG_IN',\n        email: info,\n        idToken,\n        keyForBD\n    }\n\n}\nexport function autoLogin() {\n    return (dispatch,getState) =>{\n        const token  = localStorage.getItem('token');\n        const keyForBD = localStorage.getItem('keyForBD');\n        console.log(token, keyForBD)\n        if (!token){\n            dispatch(logout())\n        }\n        else {\n            const expirationDate = new Date(localStorage.getItem('expirationDate'));\n            if (expirationDate <= new Date()){\n                dispatch(logout());\n            }\n            else {\n\n\n                dispatch(autoLogout((expirationDate.getTime() - new Date().getTime())/1000));\n\n            }\n        }\n    }\n    \n}\n\n"]},"metadata":{},"sourceType":"module"}