{"ast":null,"code":"import _classCallCheck from \"/Users/egor/Documents/qqq/Tasker/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/egor/Documents/qqq/Tasker/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/egor/Documents/qqq/Tasker/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/egor/Documents/qqq/Tasker/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/egor/Documents/qqq/Tasker/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/egor/Documents/qqq/Tasker/src/containers/LogIn/LogIn.js\";\nimport React from 'react';\nimport classes from './LogIn.css';\nimport is from 'is_js';\nimport { connect } from \"react-redux\";\nimport { auth as _auth } from \"../../store/actions/auth\";\nimport { NavLink } from 'react-router-dom';\nimport Button from '../../components/UI/Button/Button';\nimport Input from \"../../components/UI/Input/Input\";\n\nvar LogIn =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(LogIn, _React$Component);\n\n  function LogIn() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, LogIn);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(LogIn)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      allValid: false,\n      formControls: {\n        Email: {\n          value: '',\n          isValid: true,\n          isTouched: false,\n          type: 'text',\n          label: 'Email'\n        },\n        password: {\n          value: '',\n          isValid: true,\n          isTouched: false,\n          type: 'password',\n          label: 'password'\n        }\n      }\n    };\n\n    _this.onChangeHandler = function (e, control) {\n      control.isTouched = true;\n      control.value = e.target.value;\n      var formControls = _this.state.formControls;\n\n      if (control.label === 'Email') {\n        if (is.email(control.value)) {\n          control.isValid = true;\n        } else {\n          control.isValid = false;\n        }\n      }\n\n      if (control.label === 'password') {\n        if (control.value.length >= 6) {\n          control.isValid = true;\n        } else {\n          control.isValid = false;\n        }\n      }\n\n      formControls[control.label] = control;\n\n      _this.setState({\n        formControls: formControls\n      });\n\n      var names = Object.keys(_this.state.formControls);\n      var count = 0;\n\n      for (var i = 0; i < names.length; i++) {\n        if (formControls[names[i]].isValid && formControls[names[i]].isTouched) {\n          count++;\n        }\n      }\n\n      if (count === names.length) {\n        _this.setState({\n          allValid: true\n        });\n      }\n    };\n\n    _this.enterButtonClickHandler = function (x) {\n      x ? _this.props.auth(_this.state.formControls.Email.value, _this.state.formControls.password.value, true) : _this.props.auth(_this.state.formControls.Email.value, _this.state.formControls.password.value, false);\n\n      _this.setState({\n        allValid: false,\n        formControls: {\n          Email: {\n            value: '',\n            isValid: true,\n            isTouched: false,\n            type: 'text',\n            label: 'Email'\n          },\n          password: {\n            value: '',\n            isValid: true,\n            isTouched: false,\n            type: 'password',\n            label: 'password'\n          }\n        }\n      });\n    };\n\n    _this.onEnterButtonClickHandler = function () {\n      _this.enterButtonClickHandler(1);\n    };\n\n    return _this;\n  }\n\n  _createClass(LogIn, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      console.log(this.props);\n      var email = this.state.formControls.Email;\n      var password = this.state.formControls.password;\n      var cls = !this.props.isClicked ? [classes.LogIn, classes.upped] : classes.LogIn;\n      console.log(cls);\n      return React.createElement(\"div\", {\n        className: classes.LogIn,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: classes.Main,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, React.createElement(\"h2\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, \"Sign Up\"), React.createElement(Input, {\n        isValid: email.isValid,\n        name: 'Email',\n        value: email.value,\n        onChange: function onChange(e) {\n          return _this2.onChangeHandler(e, email);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }), React.createElement(Input, {\n        name: 'Password',\n        isValid: password.isValid,\n        type: password.type,\n        value: password.value,\n        onChange: function onChange(e) {\n          return _this2.onChangeHandler(e, password);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: classes.Buttons,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(Button, {\n        disabled: !this.state.allValid,\n        type: 'red',\n        onClick: function onClick() {\n          return _this2.enterButtonClickHandler(0);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"\\u0417\\u0430\\u0440\\u0435\\u0433\\u0435\\u0441\\u0442\\u0440\\u0438\\u0440\\u043E\\u0432\\u0430\\u0442\\u044C\\u0441\\u044F\"), React.createElement(NavLink, {\n        to: '/main',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, React.createElement(Button, {\n        type: 'green',\n        disabled: !this.state.allValid,\n        onClick: function onClick() {\n          return _this2.onEnterButtonClickHandler();\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, \"\\u0412\\u043E\\u0439\\u0442\\u0438\")))));\n    }\n  }]);\n\n  return LogIn;\n}(React.Component);\n\nfunction mapDispatchToProps(dispatch) {\n  return {\n    auth: function auth(email, password, isLogin) {\n      return dispatch(_auth(email, password, isLogin));\n    }\n  };\n}\n\nfunction mapStateToProps(state) {\n  return {\n    state: state.auth\n  };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LogIn);","map":{"version":3,"sources":["/Users/egor/Documents/qqq/Tasker/src/containers/LogIn/LogIn.js"],"names":["React","classes","is","connect","auth","NavLink","Button","Input","LogIn","state","allValid","formControls","Email","value","isValid","isTouched","type","label","password","onChangeHandler","e","control","target","email","length","setState","names","Object","keys","count","i","enterButtonClickHandler","x","props","onEnterButtonClickHandler","console","log","cls","isClicked","upped","Main","Buttons","Component","mapDispatchToProps","dispatch","isLogin","mapStateToProps"],"mappings":"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","sourcesContent":["import React from 'react'\nimport classes from './LogIn.css'\nimport is from 'is_js'\nimport {connect} from \"react-redux\";\nimport {auth} from \"../../store/actions/auth\";\nimport {NavLink} from 'react-router-dom'\nimport Button from '../../components/UI/Button/Button'\nimport Input from \"../../components/UI/Input/Input\";\n\n\nclass LogIn extends React.Component{\n    state = {\n        allValid: false,\n        formControls:{\n            Email:{\n                value: '',\n                isValid: true,\n                isTouched: false,\n                type: 'text',\n                label:'Email'\n            },\n            password:{\n                value: '',\n                isValid:true,\n                isTouched:false,\n                type: 'password',\n                label:'password'\n            }\n        }\n\n    };\n    onChangeHandler = (e, control)=>{\n        control.isTouched = true;\n        control.value = e.target.value;\n        const formControls = this.state.formControls;\n        if (control.label === 'Email'){\n            if (is.email(control.value)){\n                control.isValid = true\n            }\n            else {\n                control.isValid = false\n            }\n\n        }\n        if (control.label === 'password'){\n            if(control.value.length >=6){\n                control.isValid = true\n            }\n            else {\n                control.isValid = false\n            }\n        }\n        formControls[control.label] = control;\n\n\n        this.setState({\n            formControls\n        });\n        const names = Object.keys(this.state.formControls);\n\n\n\n        let count = 0;\n        for (let i=0; i<names.length;i++){\n            if (formControls[names[i]].isValid && formControls[names[i]].isTouched){\n                count ++;\n\n            }\n        }\n        if (count === names.length){\n            this.setState({\n                allValid: true\n\n            })\n\n        }\n\n    };\n    enterButtonClickHandler = (x) =>{\n        x ?\n            this.props.auth(this.state.formControls.Email.value, this.state.formControls.password.value, true) :\n            this.props.auth(this.state.formControls.Email.value, this.state.formControls.password.value, false)\n\n\n\n        this.setState({\n            allValid: false,\n            formControls:{\n                Email:{\n                    value: '',\n                    isValid: true,\n                    isTouched: false,\n                    type: 'text',\n                    label:'Email'\n                },\n                password:{\n                    value: '',\n                    isValid:true,\n                    isTouched:false,\n                    type: 'password',\n                    label:'password'\n                }\n            }\n\n        })\n\n    }\n    onEnterButtonClickHandler=()=>{\n        this.enterButtonClickHandler(1);\n\n\n\n    }\n\n    render(){\n        console.log(this.props);\n        const email = this.state.formControls.Email;\n        const password = this.state.formControls.password;\n        const cls= !this.props.isClicked ? [classes.LogIn, classes.upped] : classes.LogIn;\n        console.log(cls)\n\n        return(\n            <div className={classes.LogIn}>\n                <div className={classes.Main}>\n                    <h2>Sign Up</h2>\n                    <Input isValid={email.isValid} name={'Email'}  value={email.value} onChange={(e)=>this.onChangeHandler(e, email)}/>\n                    <Input name={'Password'} isValid={password.isValid} type={password.type} value={password.value} onChange={(e)=>this.onChangeHandler(e, password)}/>\n                    <div className={classes.Buttons}>\n                        <Button disabled={!this.state.allValid} type={'red'} onClick={()=>this.enterButtonClickHandler(0)}>Зарегестрироваться</Button>\n                        <NavLink to={'/main'} >\n                            <Button type={'green'} disabled={!this.state.allValid} onClick={()=>this.onEnterButtonClickHandler()}>Войти</Button>\n                        </NavLink>\n                    </div>\n\n                </div>\n\n            </div>\n        )\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return{\n        auth:(email, password, isLogin)=> dispatch(auth(email,password, isLogin)),\n\n    }\n\n}\nfunction mapStateToProps(state) {\n    return{\n        state: state.auth\n    }\n\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(LogIn);"]},"metadata":{},"sourceType":"module"}