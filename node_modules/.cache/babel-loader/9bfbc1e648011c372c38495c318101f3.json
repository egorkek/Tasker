{"ast":null,"code":"import _regeneratorRuntime from \"/Users/egor/Documents/qqq/Tasker/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/egor/Documents/qqq/Tasker/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport axios from 'axios';\nimport { getTasks } from './getTasks';\nexport function auth(email, password, isLogin) {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee(dispatch, getState) {\n        var authData, dbName, dataForBD, response, idToken, data, expirationDate;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                authData = {\n                  email: email,\n                  password: password,\n                  returnSecureToken: true\n                };\n                dbName = authData.email.replace('@', '').replace('.', '');\n\n                if (isLogin) {\n                  _context.next = 8;\n                  break;\n                }\n\n                console.log(authData);\n                dataForBD = {\n                  email: email,\n                  listOfTasks: {}\n                };\n                _context.next = 7;\n                return axios.post('https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=AIzaSyDJHO8YGwRavnNLmCryDKXOic-ChroRlFo', authData);\n\n              case 7:\n                axios.put(\"https://taskscheduler-be7db.firebaseio.com/users/\".concat(dbName, \".json\"), dataForBD);\n\n              case 8:\n                if (!isLogin) {\n                  _context.next = 23;\n                  break;\n                }\n\n                _context.next = 11;\n                return axios.post('https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=AIzaSyDJHO8YGwRavnNLmCryDKXOic-ChroRlFo', authData);\n\n              case 11:\n                response = _context.sent;\n                idToken = response.data.idToken;\n                console.log(response.data);\n                data = response.data;\n                expirationDate = new Date(new Date().getTime() + data.expiresIn * 1000);\n                localStorage.setItem('token', data.idToken);\n                localStorage.setItem('userId', data.localId);\n                localStorage.setItem('expirationDate', expirationDate);\n                localStorage.setItem('keyForBD', dbName);\n                console.log(expirationDate); // const info = await axios.get(`https://taskscheduler-be7db.firebaseio.com/users/<${response.data.email.replace('@', '').replace('.', '')}>.json`);\n\n                dispatch(login(authData.email, idToken, dbName));\n                dispatch(getTasks());\n\n              case 23:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }()\n  );\n}\nexport function autoLogout(time) {\n  return function (dispatch) {\n    setTimeout(function () {\n      logout();\n    }, time * 1000);\n  };\n}\n;\nexport function logout() {\n  localStorage.removeItem('token');\n  localStorage.removeItem('userId');\n  localStorage.removeItem('keyForBD');\n  localStorage.removeItem('expirationDate');\n  return {\n    type: 'LOGOUT'\n  };\n}\nexport function autoLogin() {\n  return (\n    /*#__PURE__*/\n    function () {\n      var _ref2 = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee2(dispatch) {\n        var token, keyForBD, expirationDate;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                token = localStorage.getItem('token');\n                keyForBD = localStorage.getItem('keyForBD');\n\n                if (!token) {\n                  dispatch(logout());\n                } else {\n                  expirationDate = new Date(localStorage.getItem('expirationDate'));\n\n                  if (expirationDate <= new Date()) {\n                    dispatch(logout());\n                  } else {\n                    dispatch(login(token, keyForBD));\n                    dispatch(autoLogout((expirationDate.getTime() - new Date().getTime()) / 1000));\n                  }\n                }\n\n              case 3:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      return function (_x3) {\n        return _ref2.apply(this, arguments);\n      };\n    }()\n  );\n}\n\nfunction login(idToken, keyForBD, info) {\n  return {\n    type: 'LOG_IN',\n    email: info,\n    idToken: idToken,\n    keyForBD: keyForBD\n  };\n}","map":{"version":3,"sources":["/Users/egor/Documents/qqq/Tasker/src/store/actions/auth.js"],"names":["axios","getTasks","auth","email","password","isLogin","dispatch","getState","authData","returnSecureToken","dbName","replace","console","log","dataForBD","listOfTasks","post","put","response","idToken","data","expirationDate","Date","getTime","expiresIn","localStorage","setItem","localId","login","autoLogout","time","setTimeout","logout","removeItem","type","autoLogin","token","getItem","keyForBD","info"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport {getTasks} from './getTasks'\n\nexport function auth(email, password, isLogin) {\n    return async (dispatch, getState) =>{\n        const authData = {\n            email,password, returnSecureToken: true\n        };\n        const dbName = authData.email.replace('@', '').replace('.', '');\n        if (!isLogin) {\n            console.log(authData);\n            const dataForBD = {\n                email,\n                listOfTasks:{\n\n                }\n\n\n            };\n\n            await axios.post('https://www.googleapis.com/identitytoolkit/v3/relyingparty/signupNewUser?key=AIzaSyDJHO8YGwRavnNLmCryDKXOic-ChroRlFo', authData);\n            axios.put(`https://taskscheduler-be7db.firebaseio.com/users/${dbName}.json`, dataForBD );\n\n        }\n        if(isLogin){\n        const response = await axios.post('https://www.googleapis.com/identitytoolkit/v3/relyingparty/verifyPassword?key=AIzaSyDJHO8YGwRavnNLmCryDKXOic-ChroRlFo', authData);\n        const idToken = response.data.idToken;\n        console.log(response.data);\n            const data= response.data;\n            const expirationDate = new Date(new Date().getTime() +data.expiresIn * 1000);\n            localStorage.setItem('token', data.idToken);\n            localStorage.setItem('userId', data.localId);\n            localStorage.setItem('expirationDate', expirationDate);\n            localStorage.setItem('keyForBD', dbName)\n            console.log(expirationDate);\n\n        // const info = await axios.get(`https://taskscheduler-be7db.firebaseio.com/users/<${response.data.email.replace('@', '').replace('.', '')}>.json`);\n        dispatch(login(authData.email, idToken, dbName));\n\n\n        dispatch(getTasks())\n\n\n\n\n        }\n\n    }\n\n}\n\n\nexport function autoLogout(time) {\n    return dispatch=>{\n        setTimeout(()=>{\n            logout()\n        }, time*1000)\n    }\n\n};\nexport function logout() {\n    localStorage.removeItem('token');\n    localStorage.removeItem('userId');\n    localStorage.removeItem('keyForBD');\n    localStorage.removeItem('expirationDate');\n    return{\n        type: 'LOGOUT'\n    }\n\n}\n\nexport function autoLogin() {\n    return async dispatch =>{\n        const token = localStorage.getItem('token');\n        const keyForBD = localStorage.getItem('keyForBD');\n        if (!token){\n            dispatch(logout())\n        }\n        else {\n            const expirationDate = new Date(localStorage.getItem('expirationDate'));\n            if (expirationDate <= new Date()){\n                dispatch(logout());\n            }\n            else {\n                dispatch(login(token, keyForBD));\n                dispatch(autoLogout((expirationDate.getTime() - new Date().getTime())/1000));\n\n            }\n\n        }\n    }\n\n}\n\n\nfunction login(idToken, keyForBD, info) {\n    return{\n        type: 'LOG_IN',\n        email: info,\n        idToken,\n        keyForBD\n    }\n\n}\n\n"]},"metadata":{},"sourceType":"module"}